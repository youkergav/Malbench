from malbench.malware import MalwareLauncher, MalwareMetrics
from unittest import TestCase
from unittest.mock import patch


class TestMalwareLauncher(TestCase):
    @patch("subprocess.Popen")
    def test_run(self, mock_popen):
        # Simulate running fake malware that completes successfully
        mock_popen.return_value.poll.return_value = 0
        malware = MalwareLauncher("/path/to/malware", timeout=0)

        self.assertFalse(malware.run())

        # Simulate running fake malware that exceeds timeout
        mock_popen.return_value.poll.return_value = None
        malware = MalwareLauncher("/path/to/malware", timeout=0)

        self.assertFalse(malware.run())


class TestMalwareMetrics(TestCase):
    def setUp(self):
        self.mock_malwares = [
            MalwareLauncher("/path/to/malware1"),
            MalwareLauncher("/path/to/malware2"),
            MalwareLauncher("/path/to/malware3"),
            MalwareLauncher("/path/to/malware4"),
            MalwareLauncher("/path/to/malware5"),
        ]

        self.mock_malwares[0].detected = True
        self.mock_malwares[1].detected = True
        self.mock_malwares[2].detected = True
        self.mock_malwares[3].detected = False
        self.mock_malwares[4].detected = False

    def test_detection_rate(self):
        metrics = MalwareMetrics(self.mock_malwares)
        result = metrics.detection_rate()

        self.assertEqual(result, 0.6)

    def test_detected_samples(self):
        metrics = MalwareMetrics(self.mock_malwares)

        result = metrics.detected_samples()
        expected = [self.mock_malwares[0], self.mock_malwares[1], self.mock_malwares[2]]

        self.assertEqual(result, expected)

    def test_undetected_samples(self):
        metrics = MalwareMetrics(self.mock_malwares)

        result = metrics.undetected_samples()
        expected = [self.mock_malwares[3], self.mock_malwares[4]]

        self.assertEqual(result, expected)
